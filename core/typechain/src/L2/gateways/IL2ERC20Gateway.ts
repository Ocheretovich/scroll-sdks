/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IL2ERC20GatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "finalizeDepositERC20"
      | "getL1ERC20Address"
      | "getL2ERC20Address"
      | "withdrawERC20(address,uint256,uint256)"
      | "withdrawERC20(address,address,uint256,uint256)"
      | "withdrawERC20AndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FinalizeDepositERC20" | "WithdrawERC20"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "finalizeDepositERC20",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getL1ERC20Address",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getL2ERC20Address",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20(address,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20(address,address,uint256,uint256)",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20AndCall",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "finalizeDepositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL1ERC20Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2ERC20Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20(address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20AndCall",
    data: BytesLike
  ): Result;
}

export namespace FinalizeDepositERC20Event {
  export type InputTuple = [
    l1Token: AddressLike,
    l2Token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    l1Token: string,
    l2Token: string,
    from: string,
    to: string,
    amount: bigint,
    data: string
  ];
  export interface OutputObject {
    l1Token: string;
    l2Token: string;
    from: string;
    to: string;
    amount: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawERC20Event {
  export type InputTuple = [
    l1Token: AddressLike,
    l2Token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    l1Token: string,
    l2Token: string,
    from: string,
    to: string,
    amount: bigint,
    data: string
  ];
  export interface OutputObject {
    l1Token: string;
    l2Token: string;
    from: string;
    to: string;
    amount: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IL2ERC20Gateway extends BaseContract {
  connect(runner?: ContractRunner | null): IL2ERC20Gateway;
  waitForDeployment(): Promise<this>;

  interface: IL2ERC20GatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  finalizeDepositERC20: TypedContractMethod<
    [
      l1Token: AddressLike,
      l2Token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "payable"
  >;

  getL1ERC20Address: TypedContractMethod<
    [l2Token: AddressLike],
    [string],
    "view"
  >;

  getL2ERC20Address: TypedContractMethod<
    [l1Token: AddressLike],
    [string],
    "view"
  >;

  "withdrawERC20(address,uint256,uint256)": TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, gasLimit: BigNumberish],
    [void],
    "payable"
  >;

  "withdrawERC20(address,address,uint256,uint256)": TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  withdrawERC20AndCall: TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      data: BytesLike,
      gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "finalizeDepositERC20"
  ): TypedContractMethod<
    [
      l1Token: AddressLike,
      l2Token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getL1ERC20Address"
  ): TypedContractMethod<[l2Token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getL2ERC20Address"
  ): TypedContractMethod<[l1Token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawERC20(address,uint256,uint256)"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, gasLimit: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawERC20(address,address,uint256,uint256)"
  ): TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawERC20AndCall"
  ): TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      data: BytesLike,
      gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  getEvent(
    key: "FinalizeDepositERC20"
  ): TypedContractEvent<
    FinalizeDepositERC20Event.InputTuple,
    FinalizeDepositERC20Event.OutputTuple,
    FinalizeDepositERC20Event.OutputObject
  >;
  getEvent(
    key: "WithdrawERC20"
  ): TypedContractEvent<
    WithdrawERC20Event.InputTuple,
    WithdrawERC20Event.OutputTuple,
    WithdrawERC20Event.OutputObject
  >;

  filters: {
    "FinalizeDepositERC20(address,address,address,address,uint256,bytes)": TypedContractEvent<
      FinalizeDepositERC20Event.InputTuple,
      FinalizeDepositERC20Event.OutputTuple,
      FinalizeDepositERC20Event.OutputObject
    >;
    FinalizeDepositERC20: TypedContractEvent<
      FinalizeDepositERC20Event.InputTuple,
      FinalizeDepositERC20Event.OutputTuple,
      FinalizeDepositERC20Event.OutputObject
    >;

    "WithdrawERC20(address,address,address,address,uint256,bytes)": TypedContractEvent<
      WithdrawERC20Event.InputTuple,
      WithdrawERC20Event.OutputTuple,
      WithdrawERC20Event.OutputObject
    >;
    WithdrawERC20: TypedContractEvent<
      WithdrawERC20Event.InputTuple,
      WithdrawERC20Event.OutputTuple,
      WithdrawERC20Event.OutputObject
    >;
  };
}
