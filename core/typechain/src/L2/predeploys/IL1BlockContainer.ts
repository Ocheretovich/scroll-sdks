/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IL1BlockContainerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBlockTimestamp"
      | "getStateRoot"
      | "importBlockHeader"
      | "latestBaseFee"
      | "latestBlockHash"
      | "latestBlockNumber"
      | "latestBlockTimestamp"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ImportBlock"): EventFragment;

  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "importBlockHeader",
    values: [BytesLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "latestBaseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestBlockHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestBlockTimestamp",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "importBlockHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestBaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestBlockTimestamp",
    data: BytesLike
  ): Result;
}

export namespace ImportBlockEvent {
  export type InputTuple = [
    blockHash: BytesLike,
    blockHeight: BigNumberish,
    blockTimestamp: BigNumberish,
    baseFee: BigNumberish,
    stateRoot: BytesLike
  ];
  export type OutputTuple = [
    blockHash: string,
    blockHeight: bigint,
    blockTimestamp: bigint,
    baseFee: bigint,
    stateRoot: string
  ];
  export interface OutputObject {
    blockHash: string;
    blockHeight: bigint;
    blockTimestamp: bigint;
    baseFee: bigint;
    stateRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IL1BlockContainer extends BaseContract {
  connect(runner?: ContractRunner | null): IL1BlockContainer;
  waitForDeployment(): Promise<this>;

  interface: IL1BlockContainerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBlockTimestamp: TypedContractMethod<
    [blockHash: BytesLike],
    [bigint],
    "view"
  >;

  getStateRoot: TypedContractMethod<[blockHash: BytesLike], [string], "view">;

  importBlockHeader: TypedContractMethod<
    [
      blockHash: BytesLike,
      blockHeaderRLP: BytesLike,
      updateGasPriceOracle: boolean
    ],
    [void],
    "nonpayable"
  >;

  latestBaseFee: TypedContractMethod<[], [bigint], "view">;

  latestBlockHash: TypedContractMethod<[], [string], "view">;

  latestBlockNumber: TypedContractMethod<[], [bigint], "view">;

  latestBlockTimestamp: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBlockTimestamp"
  ): TypedContractMethod<[blockHash: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStateRoot"
  ): TypedContractMethod<[blockHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "importBlockHeader"
  ): TypedContractMethod<
    [
      blockHash: BytesLike,
      blockHeaderRLP: BytesLike,
      updateGasPriceOracle: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "latestBaseFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestBlockHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "latestBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestBlockTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ImportBlock"
  ): TypedContractEvent<
    ImportBlockEvent.InputTuple,
    ImportBlockEvent.OutputTuple,
    ImportBlockEvent.OutputObject
  >;

  filters: {
    "ImportBlock(bytes32,uint256,uint256,uint256,bytes32)": TypedContractEvent<
      ImportBlockEvent.InputTuple,
      ImportBlockEvent.OutputTuple,
      ImportBlockEvent.OutputObject
    >;
    ImportBlock: TypedContractEvent<
      ImportBlockEvent.InputTuple,
      ImportBlockEvent.OutputTuple,
      ImportBlockEvent.OutputObject
    >;
  };
}
