/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IL1ERC1155GatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchDepositERC1155(address,uint256[],uint256[],uint256)"
      | "batchDepositERC1155(address,address,uint256[],uint256[],uint256)"
      | "depositERC1155(address,address,uint256,uint256,uint256)"
      | "depositERC1155(address,uint256,uint256,uint256)"
      | "finalizeBatchWithdrawERC1155"
      | "finalizeWithdrawERC1155"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchDepositERC1155"
      | "BatchRefundERC1155"
      | "DepositERC1155"
      | "FinalizeBatchWithdrawERC1155"
      | "FinalizeWithdrawERC1155"
      | "RefundERC1155"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchDepositERC1155(address,uint256[],uint256[],uint256)",
    values: [AddressLike, BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchDepositERC1155(address,address,uint256[],uint256[],uint256)",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC1155(address,address,uint256,uint256,uint256)",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC1155(address,uint256,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeBatchWithdrawERC1155",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeWithdrawERC1155",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchDepositERC1155(address,uint256[],uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDepositERC1155(address,address,uint256[],uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC1155(address,address,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC1155(address,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeBatchWithdrawERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeWithdrawERC1155",
    data: BytesLike
  ): Result;
}

export namespace BatchDepositERC1155Event {
  export type InputTuple = [
    _l1Token: AddressLike,
    _l2Token: AddressLike,
    _from: AddressLike,
    _to: AddressLike,
    _tokenIds: BigNumberish[],
    _amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    _l1Token: string,
    _l2Token: string,
    _from: string,
    _to: string,
    _tokenIds: bigint[],
    _amounts: bigint[]
  ];
  export interface OutputObject {
    _l1Token: string;
    _l2Token: string;
    _from: string;
    _to: string;
    _tokenIds: bigint[];
    _amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchRefundERC1155Event {
  export type InputTuple = [
    token: AddressLike,
    recipient: AddressLike,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    token: string,
    recipient: string,
    tokenIds: bigint[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    token: string;
    recipient: string;
    tokenIds: bigint[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositERC1155Event {
  export type InputTuple = [
    _l1Token: AddressLike,
    _l2Token: AddressLike,
    _from: AddressLike,
    _to: AddressLike,
    _tokenId: BigNumberish,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _l1Token: string,
    _l2Token: string,
    _from: string,
    _to: string,
    _tokenId: bigint,
    _amount: bigint
  ];
  export interface OutputObject {
    _l1Token: string;
    _l2Token: string;
    _from: string;
    _to: string;
    _tokenId: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizeBatchWithdrawERC1155Event {
  export type InputTuple = [
    _l1Token: AddressLike,
    _l2Token: AddressLike,
    _from: AddressLike,
    _to: AddressLike,
    _tokenIds: BigNumberish[],
    _amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    _l1Token: string,
    _l2Token: string,
    _from: string,
    _to: string,
    _tokenIds: bigint[],
    _amounts: bigint[]
  ];
  export interface OutputObject {
    _l1Token: string;
    _l2Token: string;
    _from: string;
    _to: string;
    _tokenIds: bigint[];
    _amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizeWithdrawERC1155Event {
  export type InputTuple = [
    _l1Token: AddressLike,
    _l2Token: AddressLike,
    _from: AddressLike,
    _to: AddressLike,
    _tokenId: BigNumberish,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _l1Token: string,
    _l2Token: string,
    _from: string,
    _to: string,
    _tokenId: bigint,
    _amount: bigint
  ];
  export interface OutputObject {
    _l1Token: string;
    _l2Token: string;
    _from: string;
    _to: string;
    _tokenId: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundERC1155Event {
  export type InputTuple = [
    token: AddressLike,
    recipient: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    recipient: string,
    tokenId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    token: string;
    recipient: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IL1ERC1155Gateway extends BaseContract {
  connect(runner?: ContractRunner | null): IL1ERC1155Gateway;
  waitForDeployment(): Promise<this>;

  interface: IL1ERC1155GatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "batchDepositERC1155(address,uint256[],uint256[],uint256)": TypedContractMethod<
    [
      _token: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  "batchDepositERC1155(address,address,uint256[],uint256[],uint256)": TypedContractMethod<
    [
      _token: AddressLike,
      _to: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  "depositERC1155(address,address,uint256,uint256,uint256)": TypedContractMethod<
    [
      _token: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  "depositERC1155(address,uint256,uint256,uint256)": TypedContractMethod<
    [
      _token: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  finalizeBatchWithdrawERC1155: TypedContractMethod<
    [
      _l1Token: AddressLike,
      _l2Token: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  finalizeWithdrawERC1155: TypedContractMethod<
    [
      _l1Token: AddressLike,
      _l2Token: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchDepositERC1155(address,uint256[],uint256[],uint256)"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "batchDepositERC1155(address,address,uint256[],uint256[],uint256)"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _to: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositERC1155(address,address,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositERC1155(address,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "finalizeBatchWithdrawERC1155"
  ): TypedContractMethod<
    [
      _l1Token: AddressLike,
      _l2Token: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeWithdrawERC1155"
  ): TypedContractMethod<
    [
      _l1Token: AddressLike,
      _l2Token: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BatchDepositERC1155"
  ): TypedContractEvent<
    BatchDepositERC1155Event.InputTuple,
    BatchDepositERC1155Event.OutputTuple,
    BatchDepositERC1155Event.OutputObject
  >;
  getEvent(
    key: "BatchRefundERC1155"
  ): TypedContractEvent<
    BatchRefundERC1155Event.InputTuple,
    BatchRefundERC1155Event.OutputTuple,
    BatchRefundERC1155Event.OutputObject
  >;
  getEvent(
    key: "DepositERC1155"
  ): TypedContractEvent<
    DepositERC1155Event.InputTuple,
    DepositERC1155Event.OutputTuple,
    DepositERC1155Event.OutputObject
  >;
  getEvent(
    key: "FinalizeBatchWithdrawERC1155"
  ): TypedContractEvent<
    FinalizeBatchWithdrawERC1155Event.InputTuple,
    FinalizeBatchWithdrawERC1155Event.OutputTuple,
    FinalizeBatchWithdrawERC1155Event.OutputObject
  >;
  getEvent(
    key: "FinalizeWithdrawERC1155"
  ): TypedContractEvent<
    FinalizeWithdrawERC1155Event.InputTuple,
    FinalizeWithdrawERC1155Event.OutputTuple,
    FinalizeWithdrawERC1155Event.OutputObject
  >;
  getEvent(
    key: "RefundERC1155"
  ): TypedContractEvent<
    RefundERC1155Event.InputTuple,
    RefundERC1155Event.OutputTuple,
    RefundERC1155Event.OutputObject
  >;

  filters: {
    "BatchDepositERC1155(address,address,address,address,uint256[],uint256[])": TypedContractEvent<
      BatchDepositERC1155Event.InputTuple,
      BatchDepositERC1155Event.OutputTuple,
      BatchDepositERC1155Event.OutputObject
    >;
    BatchDepositERC1155: TypedContractEvent<
      BatchDepositERC1155Event.InputTuple,
      BatchDepositERC1155Event.OutputTuple,
      BatchDepositERC1155Event.OutputObject
    >;

    "BatchRefundERC1155(address,address,uint256[],uint256[])": TypedContractEvent<
      BatchRefundERC1155Event.InputTuple,
      BatchRefundERC1155Event.OutputTuple,
      BatchRefundERC1155Event.OutputObject
    >;
    BatchRefundERC1155: TypedContractEvent<
      BatchRefundERC1155Event.InputTuple,
      BatchRefundERC1155Event.OutputTuple,
      BatchRefundERC1155Event.OutputObject
    >;

    "DepositERC1155(address,address,address,address,uint256,uint256)": TypedContractEvent<
      DepositERC1155Event.InputTuple,
      DepositERC1155Event.OutputTuple,
      DepositERC1155Event.OutputObject
    >;
    DepositERC1155: TypedContractEvent<
      DepositERC1155Event.InputTuple,
      DepositERC1155Event.OutputTuple,
      DepositERC1155Event.OutputObject
    >;

    "FinalizeBatchWithdrawERC1155(address,address,address,address,uint256[],uint256[])": TypedContractEvent<
      FinalizeBatchWithdrawERC1155Event.InputTuple,
      FinalizeBatchWithdrawERC1155Event.OutputTuple,
      FinalizeBatchWithdrawERC1155Event.OutputObject
    >;
    FinalizeBatchWithdrawERC1155: TypedContractEvent<
      FinalizeBatchWithdrawERC1155Event.InputTuple,
      FinalizeBatchWithdrawERC1155Event.OutputTuple,
      FinalizeBatchWithdrawERC1155Event.OutputObject
    >;

    "FinalizeWithdrawERC1155(address,address,address,address,uint256,uint256)": TypedContractEvent<
      FinalizeWithdrawERC1155Event.InputTuple,
      FinalizeWithdrawERC1155Event.OutputTuple,
      FinalizeWithdrawERC1155Event.OutputObject
    >;
    FinalizeWithdrawERC1155: TypedContractEvent<
      FinalizeWithdrawERC1155Event.InputTuple,
      FinalizeWithdrawERC1155Event.OutputTuple,
      FinalizeWithdrawERC1155Event.OutputObject
    >;

    "RefundERC1155(address,address,uint256,uint256)": TypedContractEvent<
      RefundERC1155Event.InputTuple,
      RefundERC1155Event.OutputTuple,
      RefundERC1155Event.OutputObject
    >;
    RefundERC1155: TypedContractEvent<
      RefundERC1155Event.InputTuple,
      RefundERC1155Event.OutputTuple,
      RefundERC1155Event.OutputObject
    >;
  };
}
