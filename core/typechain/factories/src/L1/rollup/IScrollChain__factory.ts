/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IScrollChain,
  IScrollChainInterface,
} from "../../../../src/L1/rollup/IScrollChain";

const _abi = [
  {
    inputs: [],
    name: "ErrorZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "batchIndex",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "batchHash",
        type: "bytes32",
      },
    ],
    name: "CommitBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "batchIndex",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "batchHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "stateRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "withdrawRoot",
        type: "bytes32",
      },
    ],
    name: "FinalizeBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "batchIndex",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "batchHash",
        type: "bytes32",
      },
    ],
    name: "RevertBatch",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "parentBatchHeader",
        type: "bytes",
      },
      {
        internalType: "bytes[]",
        name: "chunks",
        type: "bytes[]",
      },
      {
        internalType: "bytes",
        name: "skippedL1MessageBitmap",
        type: "bytes",
      },
    ],
    name: "commitBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "batchIndex",
        type: "uint256",
      },
    ],
    name: "committedBatches",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "batchHeader",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "prevStateRoot",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "postStateRoot",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "withdrawRoot",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "aggrProof",
        type: "bytes",
      },
    ],
    name: "finalizeBatchWithProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "batchIndex",
        type: "uint256",
      },
    ],
    name: "finalizedStateRoots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "batchIndex",
        type: "uint256",
      },
    ],
    name: "isBatchFinalized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastFinalizedBatchIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "batchHeader",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "revertBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "batchIndex",
        type: "uint256",
      },
    ],
    name: "withdrawRoots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IScrollChain__factory {
  static readonly abi = _abi;
  static createInterface(): IScrollChainInterface {
    return new Interface(_abi) as IScrollChainInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IScrollChain {
    return new Contract(address, _abi, runner) as unknown as IScrollChain;
  }
}
