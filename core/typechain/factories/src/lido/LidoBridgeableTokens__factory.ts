/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  LidoBridgeableTokens,
  LidoBridgeableTokensInterface,
} from "../../../src/lido/LidoBridgeableTokens";

const _abi = [
  {
    inputs: [],
    name: "ErrorAccountIsZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorNonZeroMsgValue",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorUnsupportedL1Token",
    type: "error",
  },
  {
    inputs: [],
    name: "ErrorUnsupportedL2Token",
    type: "error",
  },
  {
    inputs: [],
    name: "l1Token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l2Token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class LidoBridgeableTokens__factory {
  static readonly abi = _abi;
  static createInterface(): LidoBridgeableTokensInterface {
    return new Interface(_abi) as LidoBridgeableTokensInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LidoBridgeableTokens {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as LidoBridgeableTokens;
  }
}
