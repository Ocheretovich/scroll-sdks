/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockPatriciaMerkleTrieVerifier,
  MockPatriciaMerkleTrieVerifierInterface,
} from "../../../src/mocks/MockPatriciaMerkleTrieVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "storageKey",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "verifyPatriciaProof",
    outputs: [
      {
        internalType: "bytes32",
        name: "stateRoot",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "storageValue",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "gasUsed",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061080e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e19b0e9414610030575b600080fd5b61004361003e366004610722565b610062565b6040805193845260208401929092529082015260600160405180910390f35b6000806000805a905061007788888888610094565b90945092505a61008790826107b7565b9150509450945094915050565b6000806104f0565b62461bcd60e51b60005260206004528060445260005b81156100c75760089190911b906001016100b2565b8060245260646000fd5b806100df576100df8261009c565b5050565b806080811061010257602083116101025760ff60071960088502011b19165b92915050565b600080823560001a60f781111561014a5760f78103602081111561012857fe5b60018581013560088302610100031c8201810196919095019094019392505050565b60bf8111156101645760be19019360019390930192915050565b5061017967139bdd081b1a5cdd60c21b61009c565b915091565b6000806000833560001a608081101561019e576001925084915050610211565b60b88110156101b757607f190191505060018301610211565b60c08110156101ed5760b7810360048111156101cf57fe5b60018681013560088302610100031c94509086010191506102119050565b6001935060f881101561020557505060018301610211565b60f61901915050600183015b9193909250565b604051819060008061022984610108565b8186863781852090959092500184845b8287101561026c5761024a8761017e565b935083810198508161026557838160801b1783526020830192505b5050610239565b82871461027557fe5b60208682030494505050509193509193565b6000196004830290811c821690602060018516156102a3575060035b610100919091031b1792915050565b60008260200282015162ffffff81168160801c9150601f8211156102dd5701601f1901359050610102565b356020919091036008021c905092915050565b6000808360200283015162ffffff81168160801c9250601f83111561031f578201601f190135925061032d9050565b3560208390036008021c9250505b9250929050565b806000808080808061034587610218565b9850925092509650888114610373576103737209cdec8ca40d2e8cadae640dad2e6dac2e8c6d606b1b61009c565b5061037e89826102f0565b9250935061038c8a826102f0565b9250925050945094509450945094565b600080600080859350833560001a600185019450600060015b828110156104d85760008060006103cb8a610218565b935093509350995083600181146103fd576103f86c090c2e6d040dad2e6dac2e8c6d609b1b8a84146100d1565b610401565b8199505b5050806002811461043157601181146104aa5761042c6b496e76616c6964206e6f646560a01b61009c565b6104cd565b61043c6001846102f0565b50835190985062ffffff81163560fc1c9060801c81801561048657600181146104965761048175496e76616c696420657874656e73696f6e206e6f646560501b61009c565b6104a2565b60018203600202880197506104a2565b60018260020203880197505b5050506104cd565b6004850260fc038b901c600f166104c181856102f0565b50985050600194909401935b5050506001016103b5565b506104e38188610287565b9250505092959194509250565b600080600080600088600061050a8d6000526014600c2090565b610514838261039c565b985093509a5092505060008061052984610218565b985092509250935061055d7f4163636f756e74206c6561662068617368206d69736d617463680000000000008488146100d1565b61058a7f4163636f756e74206c656166206e6f6465206d69736d61746368000000000000600283146100d1565b6105956000836102b2565b97506105c37f4163636f756e7420656e636f6465642070617468206d69736d617463680000008989146100d1565b602082015162ffffff1692506105d883610218565b985092509250925061060d7f4163636f756e74206c656166206974656d73206d69736d617463680000000000600483146100d1565b506106196002826102b2565b97505050600061062f8c60009081526020902090565b610639838261039c565b98509650925092505061065160016000600285610334565b96509a509750945091506106877f53746f7261676520656e636f6465642070617468206d69736d617463680000008787146100d1565b8080156106b7576106b2740a6e8dee4c2ceca40e4dedee840dad2e6dac2e8c6d605b1b8984146100d1565b6106db565b6106db740a6e8dee4c2ceca40e4dedee840dad2e6dac2e8c6d605b1b8987146100d1565b50506106e782886100e3565b9650888a01811461071357610713740a0e4dedecc40d8cadccee8d040dad2e6dac2e8c6d605b1b61009c565b50505050505094509492505050565b6000806000806060858703121561073857600080fd5b84356001600160a01b038116811461074f57600080fd5b935060208501359250604085013567ffffffffffffffff8082111561077357600080fd5b818701915087601f83011261078757600080fd5b81358181111561079657600080fd5b8860208285010111156107a857600080fd5b95989497505060200194505050565b8181038181111561010257634e487b7160e01b600052601160045260246000fdfea264697066735822122050eb96ed4410e0300962933f3f73c0f44c62d4f15b403045be387ded6203926f64736f6c63430008100033";

type MockPatriciaMerkleTrieVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPatriciaMerkleTrieVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPatriciaMerkleTrieVerifier__factory extends ContractFactory {
  constructor(...args: MockPatriciaMerkleTrieVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockPatriciaMerkleTrieVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockPatriciaMerkleTrieVerifier__factory {
    return super.connect(runner) as MockPatriciaMerkleTrieVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPatriciaMerkleTrieVerifierInterface {
    return new Interface(_abi) as MockPatriciaMerkleTrieVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockPatriciaMerkleTrieVerifier {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockPatriciaMerkleTrieVerifier;
  }
}
