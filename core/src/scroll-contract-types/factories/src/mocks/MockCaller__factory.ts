/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockCaller,
  MockCallerInterface,
} from "../../../src/mocks/MockCaller";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "callTarget",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061018a806100206000396000f3fe60806040526004361061001e5760003560e01c8063b002fba914610023575b600080fd5b6100366100313660046100b3565b610038565b005b6000836001600160a01b0316348484604051610055929190610144565b60006040518083038185875af1925050503d8060008114610092576040519150601f19603f3d011682016040523d82523d6000602084013e610097565b606091505b50509050806100ad576040513d806000833e8082fd5b50505050565b6000806000604084860312156100c857600080fd5b83356001600160a01b03811681146100df57600080fd5b9250602084013567ffffffffffffffff808211156100fc57600080fd5b818601915086601f83011261011057600080fd5b81358181111561011f57600080fd5b87602082850101111561013157600080fd5b6020830194508093505050509250925092565b818382376000910190815291905056fea26469706673582212202fdcb118673d18c58581156773ce0320a1163663e95fa37b8f3ca0052dd6c55164736f6c63430008100033";

type MockCallerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCallerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCaller__factory extends ContractFactory {
  constructor(...args: MockCallerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockCaller & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockCaller__factory {
    return super.connect(runner) as MockCaller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCallerInterface {
    return new Interface(_abi) as MockCallerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockCaller {
    return new Contract(address, _abi, runner) as unknown as MockCaller;
  }
}
