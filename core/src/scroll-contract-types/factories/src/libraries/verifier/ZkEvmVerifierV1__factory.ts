/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ZkEvmVerifierV1,
  ZkEvmVerifierV1Interface,
} from "../../../../src/libraries/verifier/ZkEvmVerifierV1";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "VerificationFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "plonkVerifier",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "aggrProof",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "publicInputHash",
        type: "bytes32",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161026d38038061026d83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516101dd6100906000396000818160550152609801526101dd6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636b4063411461003b578063e4886e5014610050575b600080fd5b61004e61004936600461012f565b610093565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6040517f00000000000000000000000000000000000000000000000000000000000000009060009061018086823760005b6104008110156100ea5760ff851661056082900383015260089490941c936020016100c4565b5061018085036101808701610580830137600080610400870183865afa915050806101285760405163439cc0cd60e01b815260040160405180910390fd5b5050505050565b60008060006040848603121561014457600080fd5b833567ffffffffffffffff8082111561015c57600080fd5b818601915086601f83011261017057600080fd5b81358181111561017f57600080fd5b87602082850101111561019157600080fd5b602092830198909750959091013594935050505056fea2646970667358221220d675e4bfb77fd3951026374aadfd6a32c60dc4dbe0742985c214587681ed60be64736f6c63430008100033";

type ZkEvmVerifierV1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZkEvmVerifierV1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZkEvmVerifierV1__factory extends ContractFactory {
  constructor(...args: ZkEvmVerifierV1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _verifier: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_verifier, overrides || {});
  }
  override deploy(
    _verifier: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_verifier, overrides || {}) as Promise<
      ZkEvmVerifierV1 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ZkEvmVerifierV1__factory {
    return super.connect(runner) as ZkEvmVerifierV1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZkEvmVerifierV1Interface {
    return new Interface(_abi) as ZkEvmVerifierV1Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ZkEvmVerifierV1 {
    return new Contract(address, _abi, runner) as unknown as ZkEvmVerifierV1;
  }
}
