/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IL1ScrollMessenger {
  export type L2MessageProofStruct = {
    batchIndex: BigNumberish;
    merkleProof: BytesLike;
  };

  export type L2MessageProofStructOutput = [
    batchIndex: bigint,
    merkleProof: string
  ] & { batchIndex: bigint; merkleProof: string };
}

export interface L1ScrollMessengerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "counterpart"
      | "dropMessage"
      | "feeVault"
      | "initialize"
      | "isL1MessageDropped"
      | "isL2MessageExecuted"
      | "maxReplayTimes"
      | "messageQueue"
      | "messageSendTimestamp"
      | "owner"
      | "paused"
      | "prevReplayIndex"
      | "relayMessageWithProof"
      | "renounceOwnership"
      | "replayMessage"
      | "replayStates"
      | "rollup"
      | "sendMessage(address,uint256,bytes,uint256,address)"
      | "sendMessage(address,uint256,bytes,uint256)"
      | "setPause"
      | "transferOwnership"
      | "updateFeeVault"
      | "updateMaxReplayTimes"
      | "xDomainMessageSender"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FailedRelayedMessage"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "RelayedMessage"
      | "SentMessage"
      | "Unpaused"
      | "UpdateFeeVault"
      | "UpdateMaxReplayTimes"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "counterpart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dropMessage",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "feeVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isL1MessageDropped",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isL2MessageExecuted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxReplayTimes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageQueue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageSendTimestamp",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prevReplayIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relayMessageWithProof",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      IL1ScrollMessenger.L2MessageProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replayMessage",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "replayStates",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "rollup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendMessage(address,uint256,bytes,uint256,address)",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage(address,uint256,bytes,uint256)",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxReplayTimes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xDomainMessageSender",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "counterpart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dropMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isL1MessageDropped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isL2MessageExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxReplayTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageSendTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prevReplayIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayMessageWithProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replayMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replayStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage(address,uint256,bytes,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage(address,uint256,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxReplayTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xDomainMessageSender",
    data: BytesLike
  ): Result;
}

export namespace FailedRelayedMessageEvent {
  export type InputTuple = [messageHash: BytesLike];
  export type OutputTuple = [messageHash: string];
  export interface OutputObject {
    messageHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayedMessageEvent {
  export type InputTuple = [messageHash: BytesLike];
  export type OutputTuple = [messageHash: string];
  export interface OutputObject {
    messageHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SentMessageEvent {
  export type InputTuple = [
    sender: AddressLike,
    target: AddressLike,
    value: BigNumberish,
    messageNonce: BigNumberish,
    gasLimit: BigNumberish,
    message: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    target: string,
    value: bigint,
    messageNonce: bigint,
    gasLimit: bigint,
    message: string
  ];
  export interface OutputObject {
    sender: string;
    target: string;
    value: bigint;
    messageNonce: bigint;
    gasLimit: bigint;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateFeeVaultEvent {
  export type InputTuple = [
    _oldFeeVault: AddressLike,
    _newFeeVault: AddressLike
  ];
  export type OutputTuple = [_oldFeeVault: string, _newFeeVault: string];
  export interface OutputObject {
    _oldFeeVault: string;
    _newFeeVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMaxReplayTimesEvent {
  export type InputTuple = [
    oldMaxReplayTimes: BigNumberish,
    newMaxReplayTimes: BigNumberish
  ];
  export type OutputTuple = [
    oldMaxReplayTimes: bigint,
    newMaxReplayTimes: bigint
  ];
  export interface OutputObject {
    oldMaxReplayTimes: bigint;
    newMaxReplayTimes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface L1ScrollMessenger extends BaseContract {
  connect(runner?: ContractRunner | null): L1ScrollMessenger;
  waitForDeployment(): Promise<this>;

  interface: L1ScrollMessengerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  counterpart: TypedContractMethod<[], [string], "view">;

  dropMessage: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _messageNonce: BigNumberish,
      _message: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  feeVault: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _counterpart: AddressLike,
      _feeVault: AddressLike,
      _rollup: AddressLike,
      _messageQueue: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isL1MessageDropped: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  isL2MessageExecuted: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  maxReplayTimes: TypedContractMethod<[], [bigint], "view">;

  messageQueue: TypedContractMethod<[], [string], "view">;

  messageSendTimestamp: TypedContractMethod<
    [arg0: BytesLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  prevReplayIndex: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  relayMessageWithProof: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _nonce: BigNumberish,
      _message: BytesLike,
      _proof: IL1ScrollMessenger.L2MessageProofStruct
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  replayMessage: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _messageNonce: BigNumberish,
      _message: BytesLike,
      _newGasLimit: BigNumberish,
      _refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;

  replayStates: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, bigint] & { times: bigint; lastIndex: bigint }],
    "view"
  >;

  rollup: TypedContractMethod<[], [string], "view">;

  "sendMessage(address,uint256,bytes,uint256,address)": TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      _refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;

  "sendMessage(address,uint256,bytes,uint256)": TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _message: BytesLike,
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  setPause: TypedContractMethod<[_status: boolean], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFeeVault: TypedContractMethod<
    [_newFeeVault: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMaxReplayTimes: TypedContractMethod<
    [_newMaxReplayTimes: BigNumberish],
    [void],
    "nonpayable"
  >;

  xDomainMessageSender: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "counterpart"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dropMessage"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _messageNonce: BigNumberish,
      _message: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _counterpart: AddressLike,
      _feeVault: AddressLike,
      _rollup: AddressLike,
      _messageQueue: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isL1MessageDropped"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isL2MessageExecuted"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxReplayTimes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "messageQueue"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "messageSendTimestamp"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "prevReplayIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "relayMessageWithProof"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _nonce: BigNumberish,
      _message: BytesLike,
      _proof: IL1ScrollMessenger.L2MessageProofStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "replayMessage"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _messageNonce: BigNumberish,
      _message: BytesLike,
      _newGasLimit: BigNumberish,
      _refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "replayStates"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, bigint] & { times: bigint; lastIndex: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "rollup"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendMessage(address,uint256,bytes,uint256,address)"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      _refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendMessage(address,uint256,bytes,uint256)"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _message: BytesLike,
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setPause"
  ): TypedContractMethod<[_status: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeVault"
  ): TypedContractMethod<[_newFeeVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxReplayTimes"
  ): TypedContractMethod<
    [_newMaxReplayTimes: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xDomainMessageSender"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "FailedRelayedMessage"
  ): TypedContractEvent<
    FailedRelayedMessageEvent.InputTuple,
    FailedRelayedMessageEvent.OutputTuple,
    FailedRelayedMessageEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RelayedMessage"
  ): TypedContractEvent<
    RelayedMessageEvent.InputTuple,
    RelayedMessageEvent.OutputTuple,
    RelayedMessageEvent.OutputObject
  >;
  getEvent(
    key: "SentMessage"
  ): TypedContractEvent<
    SentMessageEvent.InputTuple,
    SentMessageEvent.OutputTuple,
    SentMessageEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateFeeVault"
  ): TypedContractEvent<
    UpdateFeeVaultEvent.InputTuple,
    UpdateFeeVaultEvent.OutputTuple,
    UpdateFeeVaultEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMaxReplayTimes"
  ): TypedContractEvent<
    UpdateMaxReplayTimesEvent.InputTuple,
    UpdateMaxReplayTimesEvent.OutputTuple,
    UpdateMaxReplayTimesEvent.OutputObject
  >;

  filters: {
    "FailedRelayedMessage(bytes32)": TypedContractEvent<
      FailedRelayedMessageEvent.InputTuple,
      FailedRelayedMessageEvent.OutputTuple,
      FailedRelayedMessageEvent.OutputObject
    >;
    FailedRelayedMessage: TypedContractEvent<
      FailedRelayedMessageEvent.InputTuple,
      FailedRelayedMessageEvent.OutputTuple,
      FailedRelayedMessageEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RelayedMessage(bytes32)": TypedContractEvent<
      RelayedMessageEvent.InputTuple,
      RelayedMessageEvent.OutputTuple,
      RelayedMessageEvent.OutputObject
    >;
    RelayedMessage: TypedContractEvent<
      RelayedMessageEvent.InputTuple,
      RelayedMessageEvent.OutputTuple,
      RelayedMessageEvent.OutputObject
    >;

    "SentMessage(address,address,uint256,uint256,uint256,bytes)": TypedContractEvent<
      SentMessageEvent.InputTuple,
      SentMessageEvent.OutputTuple,
      SentMessageEvent.OutputObject
    >;
    SentMessage: TypedContractEvent<
      SentMessageEvent.InputTuple,
      SentMessageEvent.OutputTuple,
      SentMessageEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UpdateFeeVault(address,address)": TypedContractEvent<
      UpdateFeeVaultEvent.InputTuple,
      UpdateFeeVaultEvent.OutputTuple,
      UpdateFeeVaultEvent.OutputObject
    >;
    UpdateFeeVault: TypedContractEvent<
      UpdateFeeVaultEvent.InputTuple,
      UpdateFeeVaultEvent.OutputTuple,
      UpdateFeeVaultEvent.OutputObject
    >;

    "UpdateMaxReplayTimes(uint256,uint256)": TypedContractEvent<
      UpdateMaxReplayTimesEvent.InputTuple,
      UpdateMaxReplayTimesEvent.OutputTuple,
      UpdateMaxReplayTimesEvent.OutputObject
    >;
    UpdateMaxReplayTimes: TypedContractEvent<
      UpdateMaxReplayTimesEvent.InputTuple,
      UpdateMaxReplayTimesEvent.OutputTuple,
      UpdateMaxReplayTimesEvent.OutputObject
    >;
  };
}
