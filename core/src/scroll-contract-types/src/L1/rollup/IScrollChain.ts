/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IScrollChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "commitBatch"
      | "committedBatches"
      | "finalizeBatchWithProof"
      | "finalizedStateRoots"
      | "isBatchFinalized"
      | "lastFinalizedBatchIndex"
      | "revertBatch"
      | "withdrawRoots"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CommitBatch" | "FinalizeBatch" | "RevertBatch"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "commitBatch",
    values: [BigNumberish, BytesLike, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "committedBatches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeBatchWithProof",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizedStateRoots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBatchFinalized",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastFinalizedBatchIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revertBatch",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRoots",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "commitBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "committedBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeBatchWithProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizedStateRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBatchFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFinalizedBatchIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRoots",
    data: BytesLike
  ): Result;
}

export namespace CommitBatchEvent {
  export type InputTuple = [batchIndex: BigNumberish, batchHash: BytesLike];
  export type OutputTuple = [batchIndex: bigint, batchHash: string];
  export interface OutputObject {
    batchIndex: bigint;
    batchHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizeBatchEvent {
  export type InputTuple = [
    batchIndex: BigNumberish,
    batchHash: BytesLike,
    stateRoot: BytesLike,
    withdrawRoot: BytesLike
  ];
  export type OutputTuple = [
    batchIndex: bigint,
    batchHash: string,
    stateRoot: string,
    withdrawRoot: string
  ];
  export interface OutputObject {
    batchIndex: bigint;
    batchHash: string;
    stateRoot: string;
    withdrawRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevertBatchEvent {
  export type InputTuple = [batchIndex: BigNumberish, batchHash: BytesLike];
  export type OutputTuple = [batchIndex: bigint, batchHash: string];
  export interface OutputObject {
    batchIndex: bigint;
    batchHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IScrollChain extends BaseContract {
  connect(runner?: ContractRunner | null): IScrollChain;
  waitForDeployment(): Promise<this>;

  interface: IScrollChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  commitBatch: TypedContractMethod<
    [
      version: BigNumberish,
      parentBatchHeader: BytesLike,
      chunks: BytesLike[],
      skippedL1MessageBitmap: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  committedBatches: TypedContractMethod<
    [batchIndex: BigNumberish],
    [string],
    "view"
  >;

  finalizeBatchWithProof: TypedContractMethod<
    [
      batchHeader: BytesLike,
      prevStateRoot: BytesLike,
      postStateRoot: BytesLike,
      withdrawRoot: BytesLike,
      aggrProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  finalizedStateRoots: TypedContractMethod<
    [batchIndex: BigNumberish],
    [string],
    "view"
  >;

  isBatchFinalized: TypedContractMethod<
    [batchIndex: BigNumberish],
    [boolean],
    "view"
  >;

  lastFinalizedBatchIndex: TypedContractMethod<[], [bigint], "view">;

  revertBatch: TypedContractMethod<
    [batchHeader: BytesLike, count: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawRoots: TypedContractMethod<
    [batchIndex: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "commitBatch"
  ): TypedContractMethod<
    [
      version: BigNumberish,
      parentBatchHeader: BytesLike,
      chunks: BytesLike[],
      skippedL1MessageBitmap: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "committedBatches"
  ): TypedContractMethod<[batchIndex: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "finalizeBatchWithProof"
  ): TypedContractMethod<
    [
      batchHeader: BytesLike,
      prevStateRoot: BytesLike,
      postStateRoot: BytesLike,
      withdrawRoot: BytesLike,
      aggrProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizedStateRoots"
  ): TypedContractMethod<[batchIndex: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isBatchFinalized"
  ): TypedContractMethod<[batchIndex: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastFinalizedBatchIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revertBatch"
  ): TypedContractMethod<
    [batchHeader: BytesLike, count: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawRoots"
  ): TypedContractMethod<[batchIndex: BigNumberish], [string], "view">;

  getEvent(
    key: "CommitBatch"
  ): TypedContractEvent<
    CommitBatchEvent.InputTuple,
    CommitBatchEvent.OutputTuple,
    CommitBatchEvent.OutputObject
  >;
  getEvent(
    key: "FinalizeBatch"
  ): TypedContractEvent<
    FinalizeBatchEvent.InputTuple,
    FinalizeBatchEvent.OutputTuple,
    FinalizeBatchEvent.OutputObject
  >;
  getEvent(
    key: "RevertBatch"
  ): TypedContractEvent<
    RevertBatchEvent.InputTuple,
    RevertBatchEvent.OutputTuple,
    RevertBatchEvent.OutputObject
  >;

  filters: {
    "CommitBatch(uint256,bytes32)": TypedContractEvent<
      CommitBatchEvent.InputTuple,
      CommitBatchEvent.OutputTuple,
      CommitBatchEvent.OutputObject
    >;
    CommitBatch: TypedContractEvent<
      CommitBatchEvent.InputTuple,
      CommitBatchEvent.OutputTuple,
      CommitBatchEvent.OutputObject
    >;

    "FinalizeBatch(uint256,bytes32,bytes32,bytes32)": TypedContractEvent<
      FinalizeBatchEvent.InputTuple,
      FinalizeBatchEvent.OutputTuple,
      FinalizeBatchEvent.OutputObject
    >;
    FinalizeBatch: TypedContractEvent<
      FinalizeBatchEvent.InputTuple,
      FinalizeBatchEvent.OutputTuple,
      FinalizeBatchEvent.OutputObject
    >;

    "RevertBatch(uint256,bytes32)": TypedContractEvent<
      RevertBatchEvent.InputTuple,
      RevertBatchEvent.OutputTuple,
      RevertBatchEvent.OutputObject
    >;
    RevertBatch: TypedContractEvent<
      RevertBatchEvent.InputTuple,
      RevertBatchEvent.OutputTuple,
      RevertBatchEvent.OutputObject
    >;
  };
}
