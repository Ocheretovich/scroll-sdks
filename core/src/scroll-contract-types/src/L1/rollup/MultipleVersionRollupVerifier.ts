/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MultipleVersionRollupVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getVerifier"
      | "initialize"
      | "latestVerifier"
      | "legacyVerifiers"
      | "legacyVerifiersLength"
      | "owner"
      | "renounceOwnership"
      | "scrollChain"
      | "transferOwnership"
      | "updateVerifier"
      | "verifyAggregateProof"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "UpdateVerifier"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getVerifier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "legacyVerifiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "legacyVerifiersLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scrollChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVerifier",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAggregateProof",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "legacyVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "legacyVerifiersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scrollChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAggregateProof",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateVerifierEvent {
  export type InputTuple = [
    startBatchIndex: BigNumberish,
    verifier: AddressLike
  ];
  export type OutputTuple = [startBatchIndex: bigint, verifier: string];
  export interface OutputObject {
    startBatchIndex: bigint;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultipleVersionRollupVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): MultipleVersionRollupVerifier;
  waitForDeployment(): Promise<this>;

  interface: MultipleVersionRollupVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getVerifier: TypedContractMethod<
    [_batchIndex: BigNumberish],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<
    [_scrollChain: AddressLike],
    [void],
    "nonpayable"
  >;

  latestVerifier: TypedContractMethod<
    [],
    [[bigint, string] & { startBatchIndex: bigint; verifier: string }],
    "view"
  >;

  legacyVerifiers: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { startBatchIndex: bigint; verifier: string }],
    "view"
  >;

  legacyVerifiersLength: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  scrollChain: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateVerifier: TypedContractMethod<
    [_startBatchIndex: BigNumberish, _verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyAggregateProof: TypedContractMethod<
    [
      _batchIndex: BigNumberish,
      _aggrProof: BytesLike,
      _publicInputHash: BytesLike
    ],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getVerifier"
  ): TypedContractMethod<[_batchIndex: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_scrollChain: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "latestVerifier"
  ): TypedContractMethod<
    [],
    [[bigint, string] & { startBatchIndex: bigint; verifier: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "legacyVerifiers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { startBatchIndex: bigint; verifier: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "legacyVerifiersLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "scrollChain"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVerifier"
  ): TypedContractMethod<
    [_startBatchIndex: BigNumberish, _verifier: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyAggregateProof"
  ): TypedContractMethod<
    [
      _batchIndex: BigNumberish,
      _aggrProof: BytesLike,
      _publicInputHash: BytesLike
    ],
    [void],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UpdateVerifier"
  ): TypedContractEvent<
    UpdateVerifierEvent.InputTuple,
    UpdateVerifierEvent.OutputTuple,
    UpdateVerifierEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UpdateVerifier(uint256,address)": TypedContractEvent<
      UpdateVerifierEvent.InputTuple,
      UpdateVerifierEvent.OutputTuple,
      UpdateVerifierEvent.OutputObject
    >;
    UpdateVerifier: TypedContractEvent<
      UpdateVerifierEvent.InputTuple,
      UpdateVerifierEvent.OutputTuple,
      UpdateVerifierEvent.OutputObject
    >;
  };
}
