/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace GasSwap {
  export type PermitDataStruct = {
    token: AddressLike;
    value: BigNumberish;
    deadline: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type PermitDataStructOutput = [
    token: string,
    value: bigint,
    deadline: bigint,
    v: bigint,
    r: string,
    s: string
  ] & {
    token: string;
    value: bigint;
    deadline: bigint;
    v: bigint;
    r: string;
    s: string;
  };

  export type SwapDataStruct = {
    target: AddressLike;
    data: BytesLike;
    minOutput: BigNumberish;
  };

  export type SwapDataStructOutput = [
    target: string,
    data: string,
    minOutput: bigint
  ] & { target: string; data: string; minOutput: bigint };
}

export interface GasSwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approvedTargets"
      | "feeRatio"
      | "isTrustedForwarder"
      | "owner"
      | "renounceOwnership"
      | "swap"
      | "transferOwnership"
      | "updateApprovedTarget"
      | "updateFeeRatio"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "UpdateApprovedTarget"
      | "UpdateFeeRatio"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approvedTargets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "feeRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [GasSwap.PermitDataStruct, GasSwap.SwapDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateApprovedTarget",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateApprovedTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateApprovedTargetEvent {
  export type InputTuple = [target: AddressLike, status: boolean];
  export type OutputTuple = [target: string, status: boolean];
  export interface OutputObject {
    target: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateFeeRatioEvent {
  export type InputTuple = [feeRatio: BigNumberish];
  export type OutputTuple = [feeRatio: bigint];
  export interface OutputObject {
    feeRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GasSwap extends BaseContract {
  connect(runner?: ContractRunner | null): GasSwap;
  waitForDeployment(): Promise<this>;

  interface: GasSwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approvedTargets: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  feeRatio: TypedContractMethod<[], [bigint], "view">;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  swap: TypedContractMethod<
    [_permit: GasSwap.PermitDataStruct, _swap: GasSwap.SwapDataStruct],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateApprovedTarget: TypedContractMethod<
    [_target: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  updateFeeRatio: TypedContractMethod<
    [_feeRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approvedTargets"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "feeRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [_permit: GasSwap.PermitDataStruct, _swap: GasSwap.SwapDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateApprovedTarget"
  ): TypedContractMethod<
    [_target: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFeeRatio"
  ): TypedContractMethod<[_feeRatio: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UpdateApprovedTarget"
  ): TypedContractEvent<
    UpdateApprovedTargetEvent.InputTuple,
    UpdateApprovedTargetEvent.OutputTuple,
    UpdateApprovedTargetEvent.OutputObject
  >;
  getEvent(
    key: "UpdateFeeRatio"
  ): TypedContractEvent<
    UpdateFeeRatioEvent.InputTuple,
    UpdateFeeRatioEvent.OutputTuple,
    UpdateFeeRatioEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UpdateApprovedTarget(address,bool)": TypedContractEvent<
      UpdateApprovedTargetEvent.InputTuple,
      UpdateApprovedTargetEvent.OutputTuple,
      UpdateApprovedTargetEvent.OutputObject
    >;
    UpdateApprovedTarget: TypedContractEvent<
      UpdateApprovedTargetEvent.InputTuple,
      UpdateApprovedTargetEvent.OutputTuple,
      UpdateApprovedTargetEvent.OutputObject
    >;

    "UpdateFeeRatio(uint256)": TypedContractEvent<
      UpdateFeeRatioEvent.InputTuple,
      UpdateFeeRatioEvent.OutputTuple,
      UpdateFeeRatioEvent.OutputObject
    >;
    UpdateFeeRatio: TypedContractEvent<
      UpdateFeeRatioEvent.InputTuple,
      UpdateFeeRatioEvent.OutputTuple,
      UpdateFeeRatioEvent.OutputObject
    >;
  };
}
