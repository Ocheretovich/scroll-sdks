/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface L2ERC1155GatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchWithdrawERC1155(address,uint256[],uint256[],uint256)"
      | "batchWithdrawERC1155(address,address,uint256[],uint256[],uint256)"
      | "counterpart"
      | "finalizeBatchDepositERC1155"
      | "finalizeDepositERC1155"
      | "initialize"
      | "messenger"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "owner"
      | "renounceOwnership"
      | "router"
      | "supportsInterface"
      | "tokenMapping"
      | "transferOwnership"
      | "updateTokenMapping"
      | "withdrawERC1155(address,uint256,uint256,uint256)"
      | "withdrawERC1155(address,address,uint256,uint256,uint256)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchWithdrawERC1155"
      | "FinalizeBatchDepositERC1155"
      | "FinalizeDepositERC1155"
      | "Initialized"
      | "OwnershipTransferred"
      | "UpdateTokenMapping"
      | "WithdrawERC1155"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchWithdrawERC1155(address,uint256[],uint256[],uint256)",
    values: [AddressLike, BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWithdrawERC1155(address,address,uint256[],uint256[],uint256)",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "counterpart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeBatchDepositERC1155",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeDepositERC1155",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMapping",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenMapping",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155(address,uint256,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155(address,address,uint256,uint256,uint256)",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchWithdrawERC1155(address,uint256[],uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWithdrawERC1155(address,address,uint256[],uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "counterpart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeBatchDepositERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeDepositERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155(address,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155(address,address,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
}

export namespace BatchWithdrawERC1155Event {
  export type InputTuple = [
    l1Token: AddressLike,
    l2Token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    l1Token: string,
    l2Token: string,
    from: string,
    to: string,
    tokenIds: bigint[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    l1Token: string;
    l2Token: string;
    from: string;
    to: string;
    tokenIds: bigint[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizeBatchDepositERC1155Event {
  export type InputTuple = [
    l1Token: AddressLike,
    l2Token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    l1Token: string,
    l2Token: string,
    from: string,
    to: string,
    tokenIds: bigint[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    l1Token: string;
    l2Token: string;
    from: string;
    to: string;
    tokenIds: bigint[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizeDepositERC1155Event {
  export type InputTuple = [
    l1Token: AddressLike,
    l2Token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    l1Token: string,
    l2Token: string,
    from: string,
    to: string,
    tokenId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    l1Token: string;
    l2Token: string;
    from: string;
    to: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateTokenMappingEvent {
  export type InputTuple = [
    l2Token: AddressLike,
    oldL1Token: AddressLike,
    newL1Token: AddressLike
  ];
  export type OutputTuple = [
    l2Token: string,
    oldL1Token: string,
    newL1Token: string
  ];
  export interface OutputObject {
    l2Token: string;
    oldL1Token: string;
    newL1Token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawERC1155Event {
  export type InputTuple = [
    l1Token: AddressLike,
    l2Token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    l1Token: string,
    l2Token: string,
    from: string,
    to: string,
    tokenId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    l1Token: string;
    l2Token: string;
    from: string;
    to: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface L2ERC1155Gateway extends BaseContract {
  connect(runner?: ContractRunner | null): L2ERC1155Gateway;
  waitForDeployment(): Promise<this>;

  interface: L2ERC1155GatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "batchWithdrawERC1155(address,uint256[],uint256[],uint256)": TypedContractMethod<
    [
      _token: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  "batchWithdrawERC1155(address,address,uint256[],uint256[],uint256)": TypedContractMethod<
    [
      _token: AddressLike,
      _to: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  counterpart: TypedContractMethod<[], [string], "view">;

  finalizeBatchDepositERC1155: TypedContractMethod<
    [
      _l1Token: AddressLike,
      _l2Token: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  finalizeDepositERC1155: TypedContractMethod<
    [
      _l1Token: AddressLike,
      _l2Token: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_counterpart: AddressLike, _messenger: AddressLike],
    [void],
    "nonpayable"
  >;

  messenger: TypedContractMethod<[], [string], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  router: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenMapping: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTokenMapping: TypedContractMethod<
    [_l2Token: AddressLike, _l1Token: AddressLike],
    [void],
    "nonpayable"
  >;

  "withdrawERC1155(address,uint256,uint256,uint256)": TypedContractMethod<
    [
      _token: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  "withdrawERC1155(address,address,uint256,uint256,uint256)": TypedContractMethod<
    [
      _token: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchWithdrawERC1155(address,uint256[],uint256[],uint256)"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "batchWithdrawERC1155(address,address,uint256[],uint256[],uint256)"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _to: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "counterpart"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "finalizeBatchDepositERC1155"
  ): TypedContractMethod<
    [
      _l1Token: AddressLike,
      _l2Token: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeDepositERC1155"
  ): TypedContractMethod<
    [
      _l1Token: AddressLike,
      _l2Token: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_counterpart: AddressLike, _messenger: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "messenger"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenMapping"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTokenMapping"
  ): TypedContractMethod<
    [_l2Token: AddressLike, _l1Token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawERC1155(address,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawERC1155(address,address,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  getEvent(
    key: "BatchWithdrawERC1155"
  ): TypedContractEvent<
    BatchWithdrawERC1155Event.InputTuple,
    BatchWithdrawERC1155Event.OutputTuple,
    BatchWithdrawERC1155Event.OutputObject
  >;
  getEvent(
    key: "FinalizeBatchDepositERC1155"
  ): TypedContractEvent<
    FinalizeBatchDepositERC1155Event.InputTuple,
    FinalizeBatchDepositERC1155Event.OutputTuple,
    FinalizeBatchDepositERC1155Event.OutputObject
  >;
  getEvent(
    key: "FinalizeDepositERC1155"
  ): TypedContractEvent<
    FinalizeDepositERC1155Event.InputTuple,
    FinalizeDepositERC1155Event.OutputTuple,
    FinalizeDepositERC1155Event.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UpdateTokenMapping"
  ): TypedContractEvent<
    UpdateTokenMappingEvent.InputTuple,
    UpdateTokenMappingEvent.OutputTuple,
    UpdateTokenMappingEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawERC1155"
  ): TypedContractEvent<
    WithdrawERC1155Event.InputTuple,
    WithdrawERC1155Event.OutputTuple,
    WithdrawERC1155Event.OutputObject
  >;

  filters: {
    "BatchWithdrawERC1155(address,address,address,address,uint256[],uint256[])": TypedContractEvent<
      BatchWithdrawERC1155Event.InputTuple,
      BatchWithdrawERC1155Event.OutputTuple,
      BatchWithdrawERC1155Event.OutputObject
    >;
    BatchWithdrawERC1155: TypedContractEvent<
      BatchWithdrawERC1155Event.InputTuple,
      BatchWithdrawERC1155Event.OutputTuple,
      BatchWithdrawERC1155Event.OutputObject
    >;

    "FinalizeBatchDepositERC1155(address,address,address,address,uint256[],uint256[])": TypedContractEvent<
      FinalizeBatchDepositERC1155Event.InputTuple,
      FinalizeBatchDepositERC1155Event.OutputTuple,
      FinalizeBatchDepositERC1155Event.OutputObject
    >;
    FinalizeBatchDepositERC1155: TypedContractEvent<
      FinalizeBatchDepositERC1155Event.InputTuple,
      FinalizeBatchDepositERC1155Event.OutputTuple,
      FinalizeBatchDepositERC1155Event.OutputObject
    >;

    "FinalizeDepositERC1155(address,address,address,address,uint256,uint256)": TypedContractEvent<
      FinalizeDepositERC1155Event.InputTuple,
      FinalizeDepositERC1155Event.OutputTuple,
      FinalizeDepositERC1155Event.OutputObject
    >;
    FinalizeDepositERC1155: TypedContractEvent<
      FinalizeDepositERC1155Event.InputTuple,
      FinalizeDepositERC1155Event.OutputTuple,
      FinalizeDepositERC1155Event.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UpdateTokenMapping(address,address,address)": TypedContractEvent<
      UpdateTokenMappingEvent.InputTuple,
      UpdateTokenMappingEvent.OutputTuple,
      UpdateTokenMappingEvent.OutputObject
    >;
    UpdateTokenMapping: TypedContractEvent<
      UpdateTokenMappingEvent.InputTuple,
      UpdateTokenMappingEvent.OutputTuple,
      UpdateTokenMappingEvent.OutputObject
    >;

    "WithdrawERC1155(address,address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawERC1155Event.InputTuple,
      WithdrawERC1155Event.OutputTuple,
      WithdrawERC1155Event.OutputObject
    >;
    WithdrawERC1155: TypedContractEvent<
      WithdrawERC1155Event.InputTuple,
      WithdrawERC1155Event.OutputTuple,
      WithdrawERC1155Event.OutputObject
    >;
  };
}
