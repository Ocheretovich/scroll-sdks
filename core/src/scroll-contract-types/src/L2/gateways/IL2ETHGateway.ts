/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IL2ETHGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "finalizeDepositETH"
      | "withdrawETH(address,uint256,uint256)"
      | "withdrawETH(uint256,uint256)"
      | "withdrawETHAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FinalizeDepositETH" | "WithdrawETH"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "finalizeDepositETH",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH(address,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETHAndCall",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "finalizeDepositETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETHAndCall",
    data: BytesLike
  ): Result;
}

export namespace FinalizeDepositETHEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    data: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawETHEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    data: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IL2ETHGateway extends BaseContract {
  connect(runner?: ContractRunner | null): IL2ETHGateway;
  waitForDeployment(): Promise<this>;

  interface: IL2ETHGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  finalizeDepositETH: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;

  "withdrawETH(address,uint256,uint256)": TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, gasLimit: BigNumberish],
    [void],
    "payable"
  >;

  "withdrawETH(uint256,uint256)": TypedContractMethod<
    [amount: BigNumberish, gasLimit: BigNumberish],
    [void],
    "payable"
  >;

  withdrawETHAndCall: TypedContractMethod<
    [
      to: AddressLike,
      amount: BigNumberish,
      data: BytesLike,
      gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "finalizeDepositETH"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawETH(address,uint256,uint256)"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, gasLimit: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawETH(uint256,uint256)"
  ): TypedContractMethod<
    [amount: BigNumberish, gasLimit: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawETHAndCall"
  ): TypedContractMethod<
    [
      to: AddressLike,
      amount: BigNumberish,
      data: BytesLike,
      gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  getEvent(
    key: "FinalizeDepositETH"
  ): TypedContractEvent<
    FinalizeDepositETHEvent.InputTuple,
    FinalizeDepositETHEvent.OutputTuple,
    FinalizeDepositETHEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawETH"
  ): TypedContractEvent<
    WithdrawETHEvent.InputTuple,
    WithdrawETHEvent.OutputTuple,
    WithdrawETHEvent.OutputObject
  >;

  filters: {
    "FinalizeDepositETH(address,address,uint256,bytes)": TypedContractEvent<
      FinalizeDepositETHEvent.InputTuple,
      FinalizeDepositETHEvent.OutputTuple,
      FinalizeDepositETHEvent.OutputObject
    >;
    FinalizeDepositETH: TypedContractEvent<
      FinalizeDepositETHEvent.InputTuple,
      FinalizeDepositETHEvent.OutputTuple,
      FinalizeDepositETHEvent.OutputObject
    >;

    "WithdrawETH(address,address,uint256,bytes)": TypedContractEvent<
      WithdrawETHEvent.InputTuple,
      WithdrawETHEvent.OutputTuple,
      WithdrawETHEvent.OutputObject
    >;
    WithdrawETH: TypedContractEvent<
      WithdrawETHEvent.InputTuple,
      WithdrawETHEvent.OutputTuple,
      WithdrawETHEvent.OutputObject
    >;
  };
}
